// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ST10084225_FarmCentral_MVC.Data;

namespace ST10084225_FarmCentral_MVC.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230529093707_FinalMig3")]
    partial class FinalMig3
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.17")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = "1",
                            ConcurrencyStamp = "41ddfb7b-f8e2-4300-9318-865fc6baa101",
                            Name = "Manager",
                            NormalizedName = "MANAGER"
                        },
                        new
                        {
                            Id = "2",
                            ConcurrencyStamp = "5aedbb7d-b1a6-43f1-bf81-7b037c445f55",
                            Name = "Employee",
                            NormalizedName = "EMPLOYEE"
                        },
                        new
                        {
                            Id = "3",
                            ConcurrencyStamp = "32699f3b-774e-4aa6-ba22-e64504a191f1",
                            Name = "Farmer",
                            NormalizedName = "FARMER"
                        },
                        new
                        {
                            Id = "4",
                            ConcurrencyStamp = "ee0b6300-4d78-4714-9e2b-31baad0e2fbe",
                            Name = "Customer",
                            NormalizedName = "CUSTOMER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = "1",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "56015bea-b598-4f0c-b262-7f57441fc202",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "MANAGER1",
                            PasswordHash = "AQAAAAEAACcQAAAAEKZUdxXeUKs0poK64zw1+zPLxFxJK7VGfyJPanBrF5o3WtlhB2ybhAOGTqD1aC97qg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a1ded6b0-572e-4075-a14b-264a11ed844b",
                            TwoFactorEnabled = false,
                            UserName = "Manager1"
                        },
                        new
                        {
                            Id = "2",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "19c8293f-9750-472e-903a-34da5050d6ba",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "EMPLOYEE1",
                            PasswordHash = "AQAAAAEAACcQAAAAEBV91JS1aKWiw6MSXT2JdnItZnfhEBSjaiEVnYOxG5ZPjDa3rw/JzqLB4XW8VxK0LA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "4fef40a3-42a2-485b-96a3-619d43d034e1",
                            TwoFactorEnabled = false,
                            UserName = "Employee1"
                        },
                        new
                        {
                            Id = "3",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ad9fd414-936b-48c2-acdd-ead003730554",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "FARMER1",
                            PasswordHash = "AQAAAAEAACcQAAAAEKxCFM/FnBcnw6h7BsEfCbbFCuYAwlOsbKCOb7VyE8VYS+ba+gsqR2kOKKl2KWg19A==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "793f76c5-4bf4-4167-88b5-cd3d311a8ffe",
                            TwoFactorEnabled = false,
                            UserName = "Farmer1"
                        },
                        new
                        {
                            Id = "4",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "daf81d0c-9e4e-4e39-a288-dcfbd65ce633",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "CUSTOMER1",
                            PasswordHash = "AQAAAAEAACcQAAAAEIsM3+RLxz7sSAlUO3C48zmhqNQ1CIMt7Wcp6XZhajlZwrqJT32XbkgzN09VpvvY5A==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "5cc982b4-9613-4f21-8785-e550d5364c14",
                            TwoFactorEnabled = false,
                            UserName = "Customer1"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = "1",
                            RoleId = "1"
                        },
                        new
                        {
                            UserId = "2",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "3",
                            RoleId = "3"
                        },
                        new
                        {
                            UserId = "4",
                            RoleId = "4"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("ST10084225_FarmCentral_MVC.Models.Farmer", b =>
                {
                    b.Property<string>("FarmerID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FarmerName")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("FarmerID", "FarmerName");

                    b.ToTable("Farmers");

                    b.HasData(
                        new
                        {
                            FarmerID = "1",
                            FarmerName = "Mike Wozoski"
                        },
                        new
                        {
                            FarmerID = "2",
                            FarmerName = "Dave Davidson"
                        },
                        new
                        {
                            FarmerID = "3",
                            FarmerName = "Jakko Marakko"
                        });
                });

            modelBuilder.Entity("ST10084225_FarmCentral_MVC.Models.Product", b =>
                {
                    b.Property<int>("ProductID")
                        .HasColumnType("int");

                    b.Property<string>("FarmerID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Category")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("ProductID", "FarmerID");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            ProductID = 1,
                            FarmerID = "1",
                            Category = "Fruit",
                            Date = new DateTime(2023, 5, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Fresh Oranges",
                            ImageID = "Oranges.jpg",
                            Name = "Oranges",
                            Price = 24.99m
                        },
                        new
                        {
                            ProductID = 2,
                            FarmerID = "1",
                            Category = "Vegetable",
                            Date = new DateTime(2023, 5, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Fresh Butter Lettuce",
                            ImageID = "Lettuce.jpg",
                            Name = "lettuce",
                            Price = 34.99m
                        },
                        new
                        {
                            ProductID = 3,
                            FarmerID = "1",
                            Category = "Fruit",
                            Date = new DateTime(2023, 5, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Fresh Strawberries",
                            ImageID = "Strawberries.jpg",
                            Name = "Strawberries",
                            Price = 32.99m
                        },
                        new
                        {
                            ProductID = 4,
                            FarmerID = "1",
                            Category = "Vegetable",
                            Date = new DateTime(2023, 5, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Fresh Leeks",
                            ImageID = "Leeks.jpg",
                            Name = "leeks",
                            Price = 29.99m
                        },
                        new
                        {
                            ProductID = 5,
                            FarmerID = "2",
                            Category = "Fruit",
                            Date = new DateTime(2023, 5, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Fresh Apples",
                            ImageID = "Apple.jpg",
                            Name = "Apples",
                            Price = 18.99m
                        },
                        new
                        {
                            ProductID = 6,
                            FarmerID = "2",
                            Category = "Vegetable",
                            Date = new DateTime(2023, 5, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Fresh Asparagus",
                            ImageID = "Aparagus.jpg",
                            Name = "Asparagus",
                            Price = 32.99m
                        },
                        new
                        {
                            ProductID = 7,
                            FarmerID = "2",
                            Category = "Fruit",
                            Date = new DateTime(2023, 5, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Freshly stolen from farmer Shivani",
                            ImageID = "Avocado.jpg",
                            Name = "Avocado",
                            Price = 27.99m
                        },
                        new
                        {
                            ProductID = 8,
                            FarmerID = "2",
                            Category = "Vegetable",
                            Date = new DateTime(2023, 5, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Fresh Chillis",
                            ImageID = "Chilli.jpg",
                            Name = "Chillis",
                            Price = 31.99m
                        },
                        new
                        {
                            ProductID = 9,
                            FarmerID = "3",
                            Category = "Vegetable",
                            Date = new DateTime(2023, 5, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Fresh Peppers",
                            ImageID = "pepper.jpg",
                            Name = "Peppers",
                            Price = 24.99m
                        },
                        new
                        {
                            ProductID = 10,
                            FarmerID = "3",
                            Category = "Vegetable",
                            Date = new DateTime(2023, 5, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Fresh Tomato",
                            ImageID = "Tomato.jpg",
                            Name = "Tomato",
                            Price = 34.99m
                        },
                        new
                        {
                            ProductID = 11,
                            FarmerID = "3",
                            Category = "Fruit",
                            Date = new DateTime(2023, 5, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Fresh Grapes",
                            ImageID = "Grapes.jpg",
                            Name = "Grapes",
                            Price = 32.99m
                        },
                        new
                        {
                            ProductID = 12,
                            FarmerID = "3",
                            Category = "Vegetable",
                            Date = new DateTime(2023, 5, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Fresh Broccoli",
                            ImageID = "Broccoli.jpg",
                            Name = "Broccoli",
                            Price = 29.99m
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
